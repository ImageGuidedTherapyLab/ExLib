
## Collecting Example Repos

#### Merging Repos

http://stackoverflow.com/questions/13040958/merge-two-git-repositories-without-breaking-file-history

Here's a way that doesn't rewrite any history, so all commit IDs will remain valid. The end-result is that the second repo's files will end up in a subdirectory.

1. Add the second repo as a remote:

   cd firstgitrepo/
   git remote add secondrepo username@servername:andsoon

2. Create a local branch from the second repo's branch:

   git branch branchfromsecondrepo secondrepo/master

3. Move all its files into a subdirectory:

   git checkout branchfromsecondrepo
   mkdir subdir/
   git ls-tree -z --name-only HEAD | xargs -0 -I {} git mv {} subdir/
   git commit -m "Moved files to subdir/"

4.  Merge the second branch into the first repo's master branch:

   git checkout master
   git merge secondbranch
