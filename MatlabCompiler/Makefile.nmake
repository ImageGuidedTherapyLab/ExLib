#
# file : Makefile (NT--Microsoft )
#
#  Example of a stand-alone makefile for compiler-generated M files
#
#  Copyright 1999-2006 The MathWorks, Inc.
#  $Revision.4 $  $Date: 2009/05/18 19:50:06 $
#

#
# You can invoke this Makefile using 
#  nmake /f Makefile.nmake MATLABROOT=[directory where MATLAB is installed]
#
# If you do not want to specify the MATLABROOT at the gmake command line 
# every single time, you can define it by uncommenting the line below
# and assigning the correct root of MATLAB (with no trailing '/') on
# the right hand side.
#
# MATLABROOT	=
#

#
# Defaults
#

MCC=$(MATLABROOT)\bin\win32\mcc
MBUILD=$(MATLABROOT)\bin\win32\mbuild
#

# It's important that MRANK gets built before MRANKP, since MRANK has
# a dependency on MRANK.M to build MRANK.C as does MRANKP.  however,
# MRANKP doesn't build MRANK.C only MRANK does.  so it's important
# that MRANK builds first, so that MRANK.C is up to date by the time
# MRANKP builds with it
#
C_TARGETS=mrank.exe hello.exe flames.exe magicsquare.exe \
			mrankp.exe multargp.exe \
			matrixdriver.exe triangle.exe collect.exe \
			ex_loadsave.exe

CPP_TARGETS=trianglep.exe matrixdriverp.exe

STANDALONE_TARGETS=$(C_TARGETS) $(CPP_TARGETS)


# Use the following target to build and test all the executables
# except mrankwin
bnt_exes: build_all
	@echo "*********** testing mrank ***********"
	mrank 
	@echo "*********** testing hello ***********"
	hello 
	@echo "*********** testing flames ***********"
	flames 
	@echo "*********** testing magicsquare 4 ***********"
	magicsquare 4
	@echo "*********** testing mrankp ***********"
	mrankp 
	@echo "*********** testing multargp ***********"
	multargp 
	@echo "*********** testing matrixdriver ***********"
	matrixdriver 
	@echo "*********** testing triangle ***********"
	triangle 
	@echo "*********** testing collect ***********"
	collect 
	@echo "*********** testing trianglep ***********"
	trianglep 
	@echo "*********** testing matrixdriverp ***********"
	matrixdriverp
	@echo "*********** testing ex_loadsave ***********"
	ex_loadsave

# This target will only build all the executables
build_all: $(STANDALONE_TARGETS)

# This target will only build the C++ targets
only_cpp: $(CPP_TARGETS)

# This target will only build the C targets
only_c: $(C_TARGETS)

# The following are each individual targets

mrank.exe: main.m mrank.m
	$(MCC) -m main.m mrank.m -o mrank

hello.exe: hello.m 
	$(MCC) -m hello.m

flames.exe: flames.m flames.mat
	$(MCC) -m flames.m -a flames.mat

magicsquare.exe: magicsquare.m 
	$(MCC) -m magicsquare

ex_loadsave.exe:
	$(MCC) -m ".\Data_Handling\ex_loadsave.m" -a ".\Data_Handling\user_data.mat" -a ".\Data_Handling\userdata\extra_data.mat" -a  ".\externdata\extern_data.mat" 

# If you do not wish to create a shared library, use the single line MCC command.
# This command will create the wrapper files and then compile all the source files
# including the wrapper code and the user supplied C/C++ code into a single executable
# binary. There is no seperate shared library created in this process.  

triangle.exe: triangle.c main_for_lib.c main_for_lib.h sierpinski.m
#	$(MCC) -l -o libtriangle sierpinski.m
#	$(MBUILD) triangle.c main_for_lib.c  libtriangle.lib
	$(MCC) -W lib:libtriangle -T link:exe triangle.c main_for_lib.c  sierpinski.m

# If you wish to create a shared library first and then link matrixdriver.c with the 
# resulting library, comment the first line of the execution code for the target below
# and uncomment the second and the third line. See the comments for the triangle target
# above for more details.

matrixdriver.exe: matrixdriver.c addmatrix.m eigmatrix.m multiplymatrix.m
	$(MCC) -W lib:libmatrix -T link:exe matrixdriver.c addmatrix.m eigmatrix.m multiplymatrix.m
#	$(MCC) -l -o libmatrix addmatrix.m eigmatrix.m multiplymatrix.m
#	$(MBUILD) matrixdriver.c -L. -lmatrix

multargp.exe: multargp.c main_for_lib.c main_for_lib.h multarg.m printmatrix.m
	$(MCC) -W lib:libMultpkg -T link:exe multargp.c main_for_lib.c multarg.m printmatrix.m

mrankp.exe: mrankp.c main_for_lib.c main_for_lib.h mrank.m printmatrix.m
	$(MCC) -W lib:libPkg -T link:exe mrankp.c main_for_lib.c mrank.m printmatrix.m

mrankwin.exe: mrankwin.c mrank.m printmatrix.m
	$(MCC) -W lib:libPkg -T link:exe mrankwin.c mrank.m printmatrix.m

# The next two targets are for the CPP shared library target example
trianglep.exe: triangle.cpp main_for_lib.c main_for_lib.h  sierpinski.m
	$(MCC) -B cpplib:libtrianglep sierpinski.m
	$(MBUILD) triangle.cpp main_for_lib.c libtrianglep.lib -output $@

matrixdriverp.exe: matrixdriver.cpp addmatrix.m eigmatrix.m multiplymatrix.m
	$(MCC) -B cpplib:libmatrixp addmatrix.m eigmatrix.m multiplymatrix.m
	$(MBUILD) matrixdriver.cpp libmatrixp.lib -output $@


# The following example depicts %#external pragma
collect.exe: collect.m measure.c
	$(MCC) -m collect.m measure.c



run_mrankwin: mrankwin.exe
	mrankwin


clean: pseudotarget
	del /f $(STANDALONE_TARGETS)

reallyclean: pseudotarget 
	del /s /q /f $(STANDALONE_TARGETS)                     	\
	 	mrank.h mrank.c                   		\
	      	main_main.c main.h main.c         		\
		hello.h hello.c hello_main.c      		\
	 	flames.h flames.c flames_main.c			\
	 	magicsquare.h magicsquare.c magicsquare_main.c	\
		multarg.h multarg.c		  		\
		libPkg* libMult* libtriangle* libmatrix*	\
		*.xml *.ctf *_mcr *mcc_component_data.c 	\
		*_main.c *.exports lib*                         \
		collect_one_external.h mccExcludedFIles.log \
		output\*
	rmdir /s /q libPkg_mcr mrank_mcr hello_mcr flames_mcr	\
		magicsquare_mcr libMultpkg_mcr libmatrix_mcr 	\
		collect_mcr libtrianglp_mcr libtriangle_mcr	\
		libmatrixp_mcr output

pseudotarget:
